tokens {
	id <- (alpha (alpha | digit)* - kwd) | (char1 char2 - `//`) char2* | char1;
	int <- digit+;
	float <- digit* `.` digit+;
	string <- `'` (unicode_any - `'`)* `'`;

	kwd <= `func` | `if` | `do` | `else` | `elif` | `ret` | `mut` | `type` | `raw` | `import` | `final` | `let` | `of` | `for` | `while`;

	ws <= (` ` | `\t` | `\r` | `\f` | `\n`);
	digit <= `0`..`9`;
	alpha <= `a`..`z` | `A`..`Z` | `_`;
	char1 <= unicode_any - (`'` | ws | langstruc | digit | `\`` | operator | alpha | digit);
	char2 <= unicode_any - (`'` | ws | langstruc | digit | `\`` | alpha | digit);

	langstruc <= `[` | `]` | `,` | `;` | `.` | `:` | `{` | `}`;
	operator <= `=`;

	cpp_sep <= `\`\`\``;
	cpp_block <- cpp_sep (unicode_any - `\``)* cpp_sep;

	top <= operator | cpp_block | kwd | id | int | float | string | langstruc;
}

lexer {
	main { body }

	mode body {
		`//` => { push comment_single; }
		top => { emit; }
		ws => { pass; }
		eof => { pop; }
	}

	mode comment_single {
		`\n` => { pop_extract; }
		eof => { pop_extract; }
		_ => { pass; }
	}
}

parser {
	main { TopLevel, Module, Decl, Stmt, Block, Expr }

	prec {
		Signature.Subtype assoc_left;
		Signature.Template;
		Signature.Type_;

		Expr.Assign assoc_right;
		Expr.Oper;
		Expr.Dot assoc_left;
		Expr.Id Expr.Lit.Integer Expr.Lit.Float Expr.Lit.String Expr.Lit.Array Expr.Paren Expr.CPP;
	}

	prop { name_strict; }

	TopLevel <- stmts:#T2[Stmt::eps];

	Module <- decls:#T2[Decl::eps];

	Signature.Type_ <- name:id;
	Signature.Template <- type:Signature `{` subtypes:#L[Signature[pr=*]::`,`:?] `}`;
	Signature.Subtype <- object:Signature `.` type:Signature;

	Qualifier.Mut <- `mut` _;
	Qualifier.Raw <- `raw` _;
	Qualifier.Final <- `final` _;

	Decl.Var <- `let` _ name:id _ `:` _ quals:Qualifier* type:Signature? assign:(_ `=` _ value:Expr)? `;`;
	Decl.Func <- `let` _ name:id _ `:` _ quals:Qualifier* `func` `[` params:#L[ParamDecl::`,`:?] `]` return_types:#L[Signature::_`,`] _ block:Block;
	Decl.Class <- `let` _ name:id _ `:` _ `type` parent:(_ `of` _ type:Signature)? _ `[` module:Module `]`;

	ParamDecl.Var <- name:id _ `:` _ quals:Qualifier* type:Signature assign:(_ `=` _ value:Expr)?;
	ParamDecl.Func <- name:id _ `:` _ quals:Qualifier* `func` `[` params:#L[ParamDecl::`,`:?] `]` return_type:Signature;

	KeyPair <= key:(expr:Expr[pr=*] _ `:` _)? value:Expr[pr=*];

	Expr.Id <- name:id;
	Expr.Lit.Integer <- value:int;
	Expr.Lit.Float <- value:float;
	Expr.Lit.String <- value:string;
	Expr.Lit.Array <- `[` items:#L[KeyPair::`,`_::] `]`;
	Expr.Assign <- left:Expr _ `=` _ right:Expr;
	Expr.Oper <- params:#L[Expr::++eps _];
	Expr.Paren <- `[` expr:Expr[pr=*] `]`;
	Expr.Dot <- left:Expr `.` right:Expr;
	Expr.CPP <- cpp:cpp_block;

	Block <- `[` stmts:#B[Stmt::eps] `]`;

	Conditional.If[A] <- `if` _ cond:Expr _ `do` _ block:Block;
	Conditional.Elif[B] <- `elif` _ cond:Expr _ `do` _ block:Block;
	Conditional.Else[C] <- `else` opt_do:`do`? _ block:Block;

	Stmt.Expr <- e:Expr `;`;
	Stmt.Block <- `.` block:Block;
	Stmt.Decl <- decl:Decl;
	Stmt.Cond <- first:Conditional[A] _ middle:Conditional[B]* _ last:Conditional[C]?;
	Stmt.Return <- `ret` values:#L[Expr::_`,`] `;`;
	Stmt.For <- `for` _ key:(name:id `,` _)? value:id _ `of` iter:Expr _ `do` _ block:Block;
	Stmt.While <- `while` _ cond:Expr _ `do` _ block:Block;
	Stmt.CPP <- `raw` _ cpp:cpp_block;
	Stmt.Import <- `import` _ specific:(path:#L[id::+`.`] _ `of` _)? islocal:`.`? path:#L[id::+`.`] `;`;
}

test {
	`let T : x{a}.y;` <- Decl;
	`let T : x.y{a};` <- Decl;
	`let T : x{a}.y{b};` <- Decl;
	`let x : int = y = 3;` <- Decl;
	`let x :  = [not true] or false;` <- Decl;
	`['a' = 1, 'b' = 2, ]` <- Expr;
	`['a' : 1, 'b' : 2, 'c', ]` <- Expr;
}
