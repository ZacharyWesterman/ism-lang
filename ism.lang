tokens {
	id <- alpha (alpha | digit)* - kwd;
	int <- digit+;
	float <- digit* `.` digit+;
	string <- `'` (unicode_any - `'`)* `'`;
	kwd <= `func` | `var` | `int` | `float` | `string` | `if` | `else` | `elif` | `ret`;

	ws <= (` ` | `\t` | `\r` | `\f` | `\n`);
	digit <= `0`..`9`;
	alpha <= `a`..`z` | `A`..`Z` | `_`;

	cpp_sep <= `\`\`\``;
	cpp_block <- cpp_sep `cpp` (unicode_any* - cpp_sep) cpp_sep;

	top <= cpp_block | kwd | id | int | float | string | `[` | `]` | `=` | `,` | `;`;
}

lexer {
	main { body }

	mode body {
		top => { emit; }
		ws => { pass; }
		eof => { pop; }
	}
}

parser {
	main { Program }

	prec {
		Expr.Assign assoc_left;
		Expr.Literal Expr.Id Expr.Paren;
		Expr.FuncCall prefix;
	}

	prop { name_strict; }

	Program <- stmts:Stmt+;

	Stmt.CPP <- x:cpp_block;
	Stmt.Decl <- x:Decl;
	Stmt.Expr <- x:Expr `;`;
	Stmt.Null <- `;`;
	Stmt.Cond <- begin:Cond[B] middle:Cond[M]* end:Cond[E]?;
	Stmt.Return <- `ret` _ x:Expr? `;`;

	//Conditional statements
	Cond.If[B] <- `if` _ `[` expr:Expr[pr=*] `]` _ scope:Scope;
	Cond.Elif[M] <- `elif` _ `[` expr:Expr[pr=*] `]` _ scope:Scope;
	Cond.Else[E] <- `else` _ scope:Scope;

	Scope <- `[` stmts:Stmt[pr=*]* `]`;

	Literal.Int_ <- val:int;
	Literal.Float_ <- val:float;
	Literal.String <- val:#L[string::+_];

	Expr.FuncCall <- name:id `[` params:#L[Expr[pr=*]::`,`:?] `]`;
	Expr.Id[I] <- name:id;
	Expr.Literal <- val:Literal;
	Expr.Assign[A] <- x:Expr[I] _ `=` _ y:Expr;
	Expr.Paren <- `[` elems:#L[Expr[pr=*]::`,`:?] `]`;

	DataType.Literal <- type:(INT:`int` | FLOAT:`float` | STRING:`string`);
	DataType.Var <- `var`;

	Signature.Var[V] <- type:DataType _ name:id _ assgt:(`=` _ expr:Expr[pr=*])?;
	Signature.Func[F] <- `func` `[` params:#L[Signature[pr=*]::`,`:?] `]` _ name:id;

	Decl.Var <- type:Signature[V] `;`;
	Decl.Func1 <- type:Signature[F] _ `=` _ expr:Expr[pr=*] `;`;
	Decl.Func2 <- type:Signature[F] _ scope:Scope;
}

test {
	//`func[] x []` <<>>;
	//`foo[x];` <<>>;
	//`foo[1];` <<>>;
	//`[123];` <<>>;
	//`func[] x = [];` <<>>;
	//`func[float a, int b] x []` <<>>;
	//`[a = 1, b = 2];` <<>>;
	//`x = [ test = 1.23 ];` <<>>;
	//`var env = [USER = '', HOSTNAME = ''];` <<>>;
	//`var a = 1; var b = 2;` <<>>;
	//`func[var a = 1] x []` <<>>;
	//`\`\`\`cpp test\`\`\`` <<>>;
	//`if [1] []` <<>>;
}
